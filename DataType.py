#!/usr/bin/env python
# coding: utf-8

# # 2. 파이썬 자료형

# ### 2.1.변수 = 데이터

# In[12]:


# 변수명 = 값     형태로  변수를 정의할 수 있습니다. 
x = 1
print(x)


# In[13]:


# 셀을 실행할때, 첫번째 줄부터 아래로,   하나의 줄에서는 왼쪽에서부터 오른쪽 순으로 실행됩니다. 
# 하나의 변수에 여러번 정의가 되는 경우, 가장 마지막에 정의한 것만 기억합니다. 

y = 3
y = 11
print(y)


# ### 2.2 숫자형 데이터 타입: int & float

# type(): 데이터 타입 확인

# In[1]:


# int: 정수
# type()명령을 통해 데이터의 타입을 확인할 수 있습니다. 
x = 15
type(x)


# In[2]:


# float : 소수점 아래 자리를 가지는 실수
y = 9.5
type(y)


# In[3]:


# 숫자형 데이터로 사칙 연산을 할 수 있습니다. 

a = 9
b = 5

print(a+b)   # 더하기
print(a-b)   # 빼기

print(a*b)   # 곱하기

print(a/b)   # 나누기
print(a//b)  # a/b 의 몫
print(a%b)   # a/b 의 나머지


# ### 2.3 문자열 데이터 타입: str

# In[7]:


# 문자열은  작은 따옴표 (' ') 큰 따옴표 (" " ) 를 이용해 표시합니다. 
s1 = '가'
s2 = "55"        # 숫자 오십오(55) 가 아니라,  문자 오오(55) 입니다. 
print(type(s1), s1)
print(type(s2), s2)


# In[6]:


# 문자열은 문자 하나하나가 순서대로 나열된 집합입니다. 
# 문자열 + 문자열 을 통해, 순서대로 연결할 수 있습니다. 
s3 = '산'
s4 = '토끼'
print(s3 + s4)


# In[ ]:





# ### 2.4 리스트 데이터 타입:  list

#     리스트: 순서대로 나열된 집합으로 여러개의 값을 묶어서 관리하기 쉽게 해 놓은 것
#     리스트명 = [구성1, 구성2, 구성3]

# In[8]:


# 리스트는 [ ] 기호를 이용해 표현합니다. 
li1 = [ ]   #  비어있는 리스트
li1


# In[9]:


# 리스트가 여러개의 원소를 가질 경우,   콤마(,) 를 이용해 각각의 원소를 구분합니다.
# 리스트는 원소로 어떤 데이터도 가질 수 있습니다. 
li2 = [ "빨강", "파랑", 1, 3, 5 ]    
li2


# 리스트[인덱스번호]

# In[11]:


# 리스트는 순서대로 나열된 집합으로,  순서를 이용해 개별 원소를 선택할 수 있습니다. (인덱싱)

li = ['가', '나','다', '라', '마']
#      0     1     2    3     4        # 앞/왼쪽 부터 세는 인덱스번호는 0부터 시작 
#     -5    -4    -3   -2    -1        # 뒤/오른쪽부터 세는 인덱스번호는 -1부터 시작   

print(li[0])   # 왼쪽에서 첫번째(0부터 시작)
print(li[2])   # 왼쪽에서 세번째(0부터 시작)
print(li[-1])  # 오른쪽에서 첫번째(-1부터 시작)
print(li[-4])  # 오른쪽에서 네번째(-1부터 시작)


# 리스트[인덱스번호 : 인덱스번호]

# In[17]:


# 인덱스 번호를 이용해 특정 구간을 선택할 수 있습니다.  (슬라이싱)

li = ['가', '나','다', '라', '마']
#      0     1     2    3     4        # 앞/왼쪽 부터 세는 인덱스번호는 0부터 시작 
#     -5    -4    -3   -2    -1        # 뒤/오른쪽부터 세는 인덱스번호는 -1부터 시작   

print(li[1: 4])    # 인덱스번호1 에서부터 인덱스번호 4번 직전까지 (4번은 포함하지 않음)
print(li[-4: 3])   # 인덱스번호-4 에서부터 인덱스번호 3번 직전까지(3번은 포함하지 않음)
print(li[ : 2])    # 처음부터(인덱스번호 표시 생략 가능함) 인덱스번호 2번 직전까지(2번 미포함)
print(li[2:  ])     # 인덱스번호 2에서부터 끝까지(인덱스번호 표시 생략 가능함)


# In[18]:


# len(그룹) 명령을 통해  원소 개수를 셀 수 있습니다. 
li = ['가', '나','다', '라', '마']
print(len(li))
ss = "산토끼"
print(len(ss))


# 리스트 + 리스트

# In[23]:


#  + 연산을 이용해 두 리스트의 원소를 하나의 리스트로 병합할 수 있습니다. 
# 이때, 왼쪽에서부터 순서대로 배열됩니다. 

li1 = ['사과','감','바나나', '파인애플']
li2 = [ 1, 3, 5, 7, 9]

print(li1 + li2)     # 왼쪽부터 순서대로 배열됩니다. 
print(li2 + li1)
print(li1)           # 원본 데이터 li1, li2 가 변경되지는 않습니다. 
print(li2)


# 리스트1.append(리스트2)

# In[26]:


#  리스트1.append(리스트2)을 통해,  리스트2를 리스트 1의 마지막(오른쪽에서 첫번째) 원소에 추가합니다. 
# 이때, 리스트2 전체가 하나의 원소로 들어갑니다

li3 = ['원숭이','코끼리','바나나']
li4 = [ 2, 4, 6, 8, 10]

print(li3)             # li3 조회(추가 전)
li3.append(li4)        # li3 의 마지막 원소자리에 li4 가 추가됩니다. 
print(li3)             # li3 조회(추가 후)
print(len(li3))        # li3 리스트의 원소 개수
print(li3[-1])         # li3 리스트의 마지막 원소


# ### 2.5 딕셔너리 데이터 타입: dict

# In[35]:


# 딕셔너리는 데이터의 이름(Key)과 값(Value)를 함께 가지고 있는 집합입니다. 
# 딕셔너리는  {변수명 : 값} 의 형태로 정의합니다. 
data = {
    '일자' : '2020-01-01',
    '이름' : '홍길동',
    '전화번호' : '010-9302-9265',
}
data


# In[36]:


# .keys() 명령을 이용해 key 값들을 조회할 수 있습니다. 
data.keys()


# In[38]:


# .values() 명령을 이용해 value 값들을 조회할 수 있습니다.
data.values()


# In[39]:


# .items() 명령을 통해  key, value 값들을 조회할 수있습니다. 
data.items()


# In[29]:


# dict[key] 를 이용해, 특정 key 값을 조회하거나, 등록할 수 있습니다. 
print(data['이름'])  # 이름 조회하기


# In[30]:


# dict[key] 를 이용해, 해당 key 값을 조회하거나, 등록할 수 있습니다. 
data['나이'] = 20      # 데이터 등록하기
data['성별'] = '남'    
print(data)

